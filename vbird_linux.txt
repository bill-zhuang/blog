vbird linux book

tty //获取当前命令行窗口路径/名称

chapter 5
1. ctrl + c 终止当前进程
   ctrl + d 键盘输入结束
2. man command
/string 向下搜索
?string 向上搜索
n/N 继续下一个搜索/反向继续搜索(针对/string ?string)
q 离开man page
3. sync 数据同步写入硬盘
   reboot 重启
   shutdown -h now 即刻关机
   halt
   poweroff
4. 在终端机里面登入后，可以看到提示字符 $ 或者 #，# 代表以 root 的身份登入系统，而 $ 则代表一般身份使用者。

chapter 6
1. ll 命令下显示的说明(见ll.png)
第一个字符代表档案属性：目录/档案/链接文件... d:目录(directory) -:档案(regular file) l:链接文件(link file) b:区块设备档(block)(硬盘、软盘等) 
	c: 字符设备文件(character)(键盘、鼠标等)//后面两个一般出现在/dev目录下 s:资料接口文件(sockets) p:数据传输文件(pipe)
然后三个为一组，档案拥有者/所属群组/其它权限 rwx: read/write/execute, 无权限，已'-'出现
然后 .
然后是数字 i-node
然后是 档案拥有者名称
然后是 所属群组
然后是 档案大小(bytes)
然后是 档案创建/修改日期
然后是 档案名称
2. chgrp //change group
chgrp [-R] group_name filename/dirname //-R用于目录下所有文件都递归改变所属群组
3. chown //change owner
chown [-R] owner_name filename/dirname //-R用于目录下所有文件都递归改变所属拥有者
chown [-R] owner_name:group_name filename/dirname //改变档案或者目录所需拥有者及所属群组
上述两个命令用于复制档案后给别人(cp命令会同时复制档案的拥有者及所属群组，所以需要修改)
4. chmod        r:4 w:2 x:1
chmod [-R] xyz filename/dirname //-R用于目录下所有文件都递归改变所属权限 xyz代表数字，如755(rwxr-xr-x)
或者
chmod [-R] a=rwx, o=rwx, g=rx, o=r filename/dirname //a:all, o:owner, g:group, o:others, 除=外，还可以使用+-来增减权限， g+w
5. rwx 对档案/目录的区别
对档案：
r:可读
w:可写(修改、新增) <----不能删除!!!! 针对档案的内容而言
x:可被执行
对目录：
r:可读目录下有何文件(可使用ls)
w:修改、新建、删除、移动、重命名目录/档案  <----无论目录下档案的权限是什么，都可以修改，相当于目录的权限覆盖了目录下档案的权限(如果目录权限比目录下档案权限大的话???)
x:能否进入目录(可使用cd)
6. FHS
/bin /boot /dev /etc /home /lib /media /mnt /opt /root /sbin /srv /tmp /usr(unix sorftware resource) /var

chapter 7
1. shell script中路径最好用绝对路径
2. ./../-/~/~account --->当前目录/当前目录的上一目录(父目录)/回到上一个工作目录/目前帐号的home目录/account帐号的home目录
3. cd(change directory)
4. pwd(print working directory) 当前所在目录
pwd -P //真实路径，非链接路径
5. mkdir [-p] dir_name //-p:迭代建立目录
mkdir [-m xyz] dir_name //-m:预设目录的权限 xyz:目录权限
6. rmdir [-p] dir_name //删除空目录!!!  -p:迭代删除空目录(rmdir -p test/test/test....) //如需删除含有内容的目录，用rm -rf dir_name 命令
7. echo $PATH //':'为路径分隔符
修改PATH变量， PATH="$PATH":dir_name
8. ls -d(仅显示目录)
9. cp [-iar] src dest 
//-i用于提示是否覆盖相同文件，-a==-pdr -p用于复制文件的时候把源文件的权限也同样复制过去(备份) -r递归复制目录
10. rm [-rfi] file_name/dir_name
//-i用于提示是否删除文件，-f用于强制删除文件 -r递归删除目录
11. mv [-fiu] src dest
//-i用于提示是否覆盖同名文件， -f用于强制移动覆盖文件，如果文件存在的话，-u用于dest文件存在，且src比较新的时候，才更新
ps：mv也可用于重命名文件 或者用rename old new old_filename //rename a.txt b.txt a.txt 把a.txt重命名为b.txt，有点蛋疼
12. 获取路径的文件名及目录名
文件名：basename route_name
目录名：dirname route_name
13. 查阅档案内容
cat //concatenate
	cat -n filename //-n打印出行号，空白行的行号也打印
tac
	tac filename //与cat相反，从最后一行开始打印
nl
	nl filename //打印档案内容，无参数下与 cat -n 相同
more
	more filename //一页一页翻动，搜索字符等与其它差不多 /...
less
	less filename //一页一页翻动，但是可以往上翻，more不行
head
	head [-n number] filename //显示档案前几行内容，-n 数字为只显示设定的行数，如果数字为负数，那么显示的行数为总行数减去设定的数字
	也可以直接 head -n filename //n为显示的行数
tail
	tail [-n number] filename //与head相反，只显示最后几行内容，-n 数字为显示设定的行数
		也可以直接 tail -n filename //n为显示的行数
	tail [-f] filename //一直监听文件内容及显示，适用于档案内容会不断写入，用于实时显示， ctrl+c中止输出内容
od
	od [-t a/c] binaryname //显示二进制文件内容
touch
	touch filename //用于建立一个空档案或者修改档案的修改时间[-acdmt]参数

umask //档案预设权限 uamsk//最右边三位或者 umask -S
	//建立档案是默认权限666(没有执行权限)，目录为777，
	//然后减去umask的值就得到建立的档案/目录的默认权限，对档案为644(rw-r--r--)，对目录是755(rwxr-xr-x)
	//ps：上面的减去umask的值，不是真的减去，如666-003 结果是是664 (rw-rw-rw-) - (-------wx) = (rw-rw-r--) !!!!! 
			实际上是先将umask的值取反NOT，然后与预设的档案/目录值相与AND
	//如果要修改umask预设减去的权限，umask xxx来设置需要的值，如 umask 002，就设置umask为002
chattr //设置文件档案隐藏属性
lsattr //显示文件档案隐藏属性

SUID SGID SBIT //U:user G:group B:bit

file filename //查看档案的数据类型
14. 搜索档案
which [-a] command_name //查找命令名所在位置(只在PATH中找)，-a参数用于列数所有在PATH目录中找到的指令
whereis [-bmsu] command_name/filename/dirname
	//-b 只查找binary格式档案，-m 只查找说明文件manual路径下档案，-s 值查找source来源档案，-u 查找不在左边三个项目中的档案
locate [-ir] keyword //-i 忽略大小写 -r 接正则表达式查找
	//locate 和 whereis 都是通过查找/var/lib/mlocate 中的数据库来查找，数据一天更新一次，如果要立即更新，使用updatedb命令
	//如果刚装了centos，那么运行 locate 命令可能会出现提示信息：can not stat () `/var/lib/mlocate/mlocate.db'....，此时需先执行updatedb命令，再执行locate即可
	  参考url：http://unix.stackexchange.com/questions/26188/how-do-i-enable-locate-and-queue-the-database-to-be-built
find //直接查找硬盘中内容
	find [PATH] [option] [option]
	option: 1.-atime/ctime/mtime n/+n/-n | -newer filepath
			2.-uid(指user id) n | -gid(指group id) n | -user name | -group name | -nouser | -nogroup
			3.-name filename | -size [+-]SIZE(+-:大于或小于SIZE c:byte k:1024bytes, 如-size +50k) | 
				-type TYPE(f/b/c/d/l/s, 参见ls档案类型，除常规档案由-变为f，其它没变) |
				-pern [-]mode(如没带-，查找权限等于mode的档案，带-是查找包含mode属性的档案)
			4. -exec command {} \; (额外的可选动作，查找到内容后执行command命令，其中{}为将find找到的内容放在{}中，\;代表执行命令到这里结束)
			5. -a(and同时满足-a两边的条件，-size +50k -a -size -60k，大小在50-60k之间) -o(or满足-o两边的条件之一， -size +50k -o -size 0，大小为大于50k或者0) !(!后面的条件不能满足 -size +50k ! -user root，大小大于50k且不能是root用户)

chapter 8
1. df [-h] //整体磁盘使用量，-h参数为已GB/MB/KB等方式列出
2. du [-smk] path //列出path路径下磁盘使用量，-s为列出总量(不列出各个目录的容量)，-m为以mb的形式列出，-k为以kb的形式列出，默认不加参数以kb输出
3. ln //软链接、硬链接
	hard link //两个链接的文件名必须相同??? 不能跨文件系统链接，不能链接目录
	symbolic link//快捷方式链接
	ln [-s] src dest //-s参书代表是否为软链接(加了-s参数，不加为硬链接)
	!!!在创建链接的时候，必须使用绝对路径，如果使用相对路径会报错："Too many levels of symbolic links"
4. fdisk //磁盘分区
5. mkfs //磁盘格式化 make file system
5. fsck/badblocks //磁盘检验
6. mount & unmount //挂载及卸载

chapter 9
1. 档案扩展名 *.Z(compress压缩) *.gz(gzip压缩) *.bz2(bzip2压缩) *.tar(tar打包，没压缩) *.tar.gz(tar打包，gzip压缩) *.tar.bz2(tar打包，bzip2压缩)
2. compress
3. gzip [-cdtv#] filename // -c参数将压缩的数据显示处理(感觉用处不大，用来重命名输出文件 gzip -c filename > *.gz) -d参数为解压*.gz文件(或者gunzip *.gz) -v参数查看压缩比信息 -t查看压缩文件是否一致，有无错误 -#(1-9) 压缩等级
   zcat *.gz //查看*.gz档案内容
4. bzip2 [-cdkzv#] filename // 参数与gzip相同， -k为保留原文件(gzip中压缩后会删除原文件)，-z为压缩参数 (bunzip2 *.bz2)
   bzcat *.bz2 //查看*.bz2档案内容
5. tar
   tar [-j/z] [cv] [-f *.tar.bz2/gz] filename(要打包压缩的档案名) //打包及压缩
   tar [-j/z] [tv] [-f *.tar.bz2/gz] //查看档案
   tar [-j/z] [xv] [-f *.tar.bz2/gz] [-C 要解压到所在目录路径] //解压缩
   //-j：通过bzip2压缩/解压 -z：通过gzip压缩或者解压
   //-c：打包档案(不是压缩，j/z才是!!!) -t：查看档案 -x：解打包及解压档案， 三个不能同时出现在一行命令中
   //-v(view)：压缩/解压过程中，将处理的文件名显示出来
   //-f filename 要处理/生成的压缩包名称
   //-p：保留备份数据原有的权限与属性 -P：保留绝对路径(待压缩的文件路径必须是绝对路径，相对的路径不行)
   //--exclude=FILE：压缩过程中，不将FILE打包
   //-C：用于将压缩文件解压到指定目录 tar -zxvf *.tar.gz -C specific_route
   //解压部分档案到指定目录 tar -zxvg *.tar.gz -C specific_route specific_filename(通过 tar -ztvf *.tar.gz 查看需要解压的档案名) ，注意-C specific_route必须放在 specific_filename前面
6. 输入命令太长，输入\后按Enter继续输入
7. dump //备份
8. restore //还原备份的dump文件，与上面的dump相反

chapter 10
1. 一般模式    编辑模式：i、I、o、O、a、A、r、R     命令模式：:/?
2. wq：保存退出  wq!：强制保存退出
3. 按键
一般模式：h(<-) j(down) k(up) l(->) ctrl+f==page down ctrl+b==page up
		  0/home键：移动到所在行开头 $/end：移动到所在行最后
		  G：移动到档案最后一行 nG：移动到第n行 gg：移动到开头第一行，相当于1G nEnter：目前所在行下移动n行
		  /word：向下搜寻word ?word：向上搜寻word n：继续向下搜寻 N：继续向上搜寻
		  :n1,n2s/word1/word2/g 在第n1到第n2行之间寻找word1，然后替换为word2
		  :1,$s/word1/word2/g 在第1到最后一行之间寻找word1，然后替换为word2
		  :1,$s/word1/word2/gc 在第1行到最后一行之间寻找word1，然后替换为word2，且替换前给出是否要替换确认信息
		  x：删除当前光标所在字符 X：删除当前光标所在字符的前一个字符 nx：连续删除当前光标开始n字符
		  dd：删除光标所在行 ndd：删除光标所在行下n行(包含光标所在行) d1G dG
		  yy：复制光标所在行 nyy：复制光标所在行下n行 y1G yG
		  p：粘贴内容到所在光标行下一行 P：粘贴内容到所在光标行上一行
		  u：复原上一动作(相当于ctrl+z) ctrl+r：重做上一动作
		  .：重复前一动作
编辑模式：i：所在光标处插入 I：所在光标行第一个非空字符处插入
		  a：所在光标下一个字符插入 A：所在光标行最后一个字符出插入
		  o：所在光标下一行插入新的一行 O：所在光标上一行插入新的一行
		  r R
		  Esc：回到一般模式
指令模式：:w 保存 :w 强制保存(不一定能保存成功，看权限)
		  :q 离开 :q!强制离开，不保存修改
		  :wq 保存后离开
		  :w filename 另存为filename
		  :n1,n2 w filename 将第n1到n2行内容保存到filename
		  :! command 离开vim到命令行模式下执行command命令 如 :! ls
		  :set nu 显示行号 :set nonu 取消行号
4. 选择区块
	ctrl+v 进入区块选择模式，然后hjkl或者上下左右键移动来选择需要的区块，然后y复制，然后回到一般模式后p粘贴复制的内容
5. :sp [filename] //在一个vim中打开多个档案窗口
6. dos2unix [-kn] file [newfile]
   unix2dos [-kn] file [newfile] //dos及unix下文档字符互换，如换行符等
7. iconv //编码格式转换
   iconv --list //列出所有编码格式
   iconv -f src_encoding -t dest_encoding filename [-o new_filename] //-f(from) -t(to)将filename档案由src_encoding转换到dest_encoding，[另存为new_filename档案]

chapter 11
1. alias //别名设定， alias new_name='command [parameter]'，如 alias ll='ls -al'
2. type [-tpa] command //判断command是外部指令还是bash内建指令
3. echo $variable_name/`command` //输出变量variable_name内容或者输出执行command命令后的结果(先执行command，再输出结果)
   variable_name=value //给变量variable_name赋值value，=两边不能有空格，如果value包含空格的话，需要用"'"或者'"'包含起来，'"'中$变量保留原有含义，与php一样
                       //'\'用来转义特殊符号，为变量增加内容，用"$variable_name"或者${variable_name}增加内容，如PATH="$PATH":/home/bin(这里的':'是PATH的一部分，即将':/home/bin'加到PATH变量中，且等号左边没有$符号!!!)
   export variable_name //使variable_name变量可以在别的程序中使用(使它成为环境变量)
   unset variable_name //取消变量
4. env //查看环境变量
5. set //查看所有变量(环境变量和自定义变量)
6. export variable_name //使variable_name 由自定义变量变为环境变量(类似全局，不同bash都可以访问)
   declare variable_name //使variable_name 由环境变量变为自定义变量
7. locale //语系

8. read [-pt] variable_name //-p用于给出提示说明信息 -t用于等待的时间，单位是秒，超过等待时间，会关闭输入
       read -p 'input your name: ' -t 10 name
9. declare [-aixr] variable_name //无参数，默认为字符类型，-a声明为数组类型 -i声明为整型int -x声明为环境变量(相当于export) -r声明为只读类型readonly，不能更改及unset
   //在读数组元素的时候，为echo ${array_name[1]} !!!
10. ulimit //设定系统资源使用限制
11. clear //清楚屏幕
12. alias [new_command='command -xx'] //如果没有参数，则是显示目前所拥有的别名命令，否则为设置命令别名
    unalias command_name //取消命令别名
13. history [n/-c] //n为列出最近n条命令记录，-c为将shell中所有history内容消除
    history [-raw] histfiles //-a将新增的history命令新增到histfiles中，如没有，预设写入~/.bash_history
                             //-r将histfiles中的内容读到目前所在shell的history记忆中
							 //-w将目前history记忆内容写到histfiles中(立即更新的，一般情况下是注销后才将命令写到文件中)
	!number //执行history命令历史记录中第number条命令
	!command //执行history命令历史记录中以command开头的最近的一条命令
	!! //执行上一条命令
14. /etc/issue //开机画面显示的内容所在位置
    //issue中代码代表含义 \d本地日期 \l所在第几个终端接口位置 \m硬件登记 \n主机网络名 \o domain name \r操作系统版本 \t本地时间 \s操作系统名 \v操作系统版本
	/etc/issue.net //用于远程登录用，显示信息
	/etc/motd //用于显示信息(所有登录用户都要的，包括维护之类的)
15. login shell //通过登录取得bash
    non-login shell //登录后启动bash及终端命令窗口
16. source/. config_file_path //使环境配置文件立即生效(~/.bashrc等)
17. 组合按键
    ctrl + c //终止当前命令
	ctrl + d //输入结束(EOF)，如邮件结束的时候，以及下面标准输入'>/>>'来结束输入
	ctrl + m //Enter
	ctrl + s //暂停屏幕输出
	ctrl + q //恢复屏幕输出
	ctrl + u //在提示字符下，将整列命令删除
	ctrl + z //暂停当前命令，放在后台中
18. 通配符 * ?(代表一个!!!) [] [x-x] [^xxx] //与正则类似
19. bash特殊符号
    # //注释 
	\x //将特殊字符或通配符转义成一把字符
	| //管线(pipe)
	; //连续指令下达分隔符，如syn;syn;shut down -h now
	~ //home
	$ //用于变量
	& //工作控制(job control)，将指令置于背景下工作
	! //not
	/ //路径分隔符
	>/>> //数据流导向，输出，>为取代，>>为累加，
		如echo 'a' > a.txt 和 echo 'a' >> a.txt 不同，前者为将a写到a.txt中，如果文件不存在，建立空文件，写入a，如果存在，清空所有内容，然后写入a；
		后者为将a添加到a.txt中，如果不存在，建立空文件，写入a，如果存在，不覆盖原有的，写在最后面
	</<< //数据流导向，输入
	'' //一般字符串
	"" //变量置换，与php中一样
	`` //``中内容先执行
	() //子shell开始和结束
	{} //命令块包含
20. 标准输入输出
	标准输入 代码为0，使用'<'或者'<<' // cat > new_file，输入内容结束后，ctrl + d结束输入，如果要通过现有文件转入，则为 cat > new_file < local_exist_file,， cat > new_file << 'ending_command'，代表输入ending_command结束输入
	标准输出 代码为1，使用'>'或者'>>'
	标准错误输出 代码为2，使用'2>'或者'2>>'
		如 ls xxxxx > right_info.txt 2> error_info.txt
	忽略错误信息或者不要输出信息，重导向到/dev/null(黑洞装置) 如 ls xxxx [2]> /dev/null
	将标准输出和错误输出写到同一个文件 ls xxxx > info.txt 2 >&1 或者 ls xxxx &> info.txt
21. && 和 ||
	command1 && command2 // command1正确执行，则执行command2，否则不执行command2
	command1 || command2 // command1正确执行，则不执行command2，否则执行command2
	&& 和 || 可以组合使用 aa && bb || cc....
以下命令与管线命令 '|' 结合使用
22. cut -d'separator' -f fields //-d后跟分割字符，不能有空格，即-d':,'  -f后为要取出的内容段数，可以是具体的某一段，也可以是区间，如5/5-10等等
	cut -c 字符区间 //-c后为要取出的字符区间，如5-/5-10
23.	grep [-acinv] [--color=auto] 'search_word' filename //-a将二进制档案以文本档案的形式查找 -c计算匹配到的次数  -i忽略大小写 -n输出行号 -v反向搜索，即搜索没有search_word的行 --color=auto将搜索到的内容用颜色标记
	//grep显示结果是如果匹配到搜索的内容，将该内容所在的行显示出来(不是显示匹配到的内容!!!)
24. sort
25. uniq [-ic] //用于去重，需先sort -i忽略大小写 -c计数
26. wc [-lwm] //-l有多少行 -w有多少英文单字 -m有多少字符
27. tee [-a] file //双重导向，-a累加的方式将内容添加到file档案中，将管线后内容保存一份为file文件，然后将同样内容继续处理，如 cat /etc/man.config | grep -i 'man' | tee grep.man | grep -c 'MAN'
28. tr [-ds] word //删除或者替换文字，-d删除掉word字符串，-s删除重复的word字符，word用''包起来
29. col [-xb] //-x将tab键转换为对等的空格(四个空格) -b内容中有反斜杠/时，仅保留/最后接的那个字符(测试好像还有反斜杠???)
30. join
31. paste [-d] file1 file2 ... //将file1和file2(可以有n个文件)每行拼起来，中间用tab键隔开 -d设置分割字符，默认tab键， '-'如果file部分写成-，则表示来自stdin
32. expand [-t] file //将file中tab键转换为空格，-t参数后跟tab键转换为空格的个数
33. split [-bl] file prefix_ //分割档案，-b后面接分割后档案大小，如b，k，m， -l为按行数分割，prefix_为分割后档案的前缀，分割后档案名以prefix_aa，prefix_ab，prefix_ac等等方式来建立档案
34. xargs
35. 减号'-' //管线命令中，使用前一个命令的stdout作为stdin，如果要用到文件名来处理，stdin 与 stdout 用'-'来代替
            //tar -cvf - /home | tar -xvf - 
			
chapter 12
1. linux正则中{}需要转义，如\{3\}
2. grep 不带-E参数的话是只支持基础正则，如对'|'不支持，如要支持，加-E参数或者直接使用egrep，所以一般情况下保持兼容性，用egrep，不用担心是否grep是否支持某些特殊字符
3. printf 'format' $content //foramt包括\t\n等，及%ns%ni%N.nf基本上与c语言的类似，其中s代表字符串(string)，i代表整数(int)，f代表浮点数(float)，n代表显示的为数，最后一个%N.nf为总长度为N，小数点为n位的实数
		//由于非管线命令，所以$content内容需要先得到，通过'$'或者``来得到
4. diff [-bBi] from_file to_file //比较from_file和to_file区别，其中-b参数为忽略一行中，多个空白的差异(即about me与about    me一样)，-B参数为忽略空白行差异，-i参数为忽略大小写
5. cmp [-s] from_file to_file //比较from_file和to_file区别，其中-s参数为列出所有不同点的字节处，默认只输出第一个不同点
   //diff以行为单位进行比较，主要用于文本文件比较；cmp以字节为单位进行比较，主要用于二进制文件比较
6. patch [-R] -pNum < *.patch //将patch文件打到文件中(假设当前所在目录只有需要打patch的文件，patch文件有diff生成，有具体命令，加'>'来输出patch文件)，其中-R为还原新的到旧的，-pNum为-p可以取消Num层目录，如果是在目标目录下，则Num为0
7. pr
8. sed [-nefri] [n1[,n2] function]
   //-n安静模式，只显示经过sed处理的行，-e直接在指令列模式进行sed动作编辑，-f后要接filename，执行filename中的sed命令，-r支持扩展正则，默认是基础正则，-i直接读取及修改档案内容，屏幕上不显示输出
   //n1，n2代表行数，最后一行用$表示
   //function包括a(append，添加在所在行的下一行)  ....| sed '2a append_content'，如需添加多行，'\'结束一行后继续输入
                 c(replace with string/char，c后接要替换为的字符串)  ......| sed '2,5c replace_content'
				 d(delete，删除行)i(insert，插入到所在行的上一行)  ....| sed '2,5d'/ sed'2,$d'
				 p(print，打印选择的行的内容) .....| sed '2,3p'
				 s(replace with regex，可接受正则，与vim下查找替换一样，/n1,n2s/old/new/g)  .....| sed '[n1,n2]s/old/new/g'
9. awk '[condition1]{to do 1} [condition2]{to do 2} ....' [filename(optional if by pipe '|')]
   //如果满足condition条件(condition条件可以为空)，则执行{to do}  <----awk后面内容必须为"'"括起来，不能是'"' !!!!
   //to do 中$0,$1,$2,...分别代表一行所有列的数据!!!，第一列数据，第二列数据
   //awk内置变量：NF(number of fileds in each line)每行所拥有的字段数 NR(number of rows)目前处理到第几行 FS(file separator)分割字符，默认是空格，可以通过{}设置FS
   //awk可使用逻辑运算符：>/>=/</<=/==/!=，与编程语言一样
   //BEGIN & END 分别为执行{to do}前和后执行相应内容
   //if while 等只能在{to do}中使用，不能在condition中使用
   
chapter 13
1. shell第一行必须内容必须为 #!/bin/bash ，用于告诉电脑使用的bash
2. 声明主要环境变量：
	PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
	export PATH
3. 程序结束后通过 exit num 来告知执行成功还是失败，一般0代表成功
4. 程序返回值通过 echo $? 来获取
5. $((计算式内容)) //计算，值支持整数，运算符：+-*/%等
6. source script.sh 与 bash/sh script.sh // 都是运行script.sh脚本，区别：前者script.sh中定义的变量可以在结束后继续访问到，后者则不行
7. test -efd filename //-e(exist)判断档案是否存在 -f(regular file)判断是否为档案 -d(directory)判断是否为目录
   //-r(read) -w(write) -x(execute0) !取反 -a(and) -o(or)  //test $a -eq 1 -a $a -eq 2 
8. [] //判断符号，如[ -e 'a.txt' ] [ 'a' == 'b' ]
   //[]中任何变量之间必须有空格，而且变量用'"'括起来，即 "$var" !!!!
9. $# $* $@ //分别代表参数个数，第*个参数，所有参数
   //script_name para1 para2 para3 ...//$#=3, $0=script_name, $1=para1...
10. shift [n]//移动参数，n为移动个数，可省略，默认为一个， 指上面$# $* $@ 都会变化
11. 
	if [...]; then
		.....
	fi
	///////////////
	if [...]; then
		....
	else 
		....
	fi
	///////////////
	if [...]; then
		....
	elif [...]; then
		....
	else 
		....
	fi
12. 
	case $var in
	"var 1")
		....
		;;  <----两个;; !!!
	"var 2")
		....
		;;  <----两个;; !!!
	esac
13. 
	function func()
	{
		....
	}
	在调用函数的时候不需要加() !!!!切记
14. 
	while [...] 
	do
		....
	done
	///////////
	until [...]
	do
		....
	done
15. 
	for $var in para1 para2 para3 ...
	do 
		....
	done
	///////////
	for ((start; limit; step)) <----两个括号
	do
		....
	done
16. netstat -tuln
17. sh [-nvx] script.sh //shell script 追踪及 debug
    //-n参数为不执行script，仅检查语法是否正确，-v参数为执行script前，先输出script的内容，-x参数为将运行过的script内容打印出来

ps：script中运算符两边不能有空格!!!!!!语句结束不用加分号';'!!!!
    用'='赋值是，左边的不用加‘$'符号!!!!右边的加'$'和没加测试结果貌似一样，没报错，结果也一样
	
chapter 14
1. passwd [account_name] //修改密码，如果没加account_name的话，相当于修改root帐号密码
2. useradd account_name //添加帐号
3. chage account_name //修改密码
4. usermod //修改帐号
4. userdel account_name //删除帐号
5. id [account_name] //查询account_name的uid，gid等信息，如不写account_name，则为查询当前用户uid，gid等信息
6. groupadd [-g group_id] [-r] group_name //添加群组，[-g group_id]用于添加特定group_id(gid)的群组，[-r]为建立系统群组
7. groupmod //修改群组
8. groupdel group_name //删除群组
9. gpassed
10. su [-] [-c 'command'] //switch user，切换到root账户，需输入root密码，
	//'-'代表以login shell方式登录，不加的话待变non-login shell方式登录，包括PATH等变量还是登陆前的用户!!!!
	//-c参数为以root身份仅执行一次command命令
	//完整切换到新环境需使用： su - username 或者 su -l username
11. sudo //通过 visudo 命令来修改哪些用户及群组可以使用root操作
12. w/who 获取当前登录在系统上的用户
13. write account_name //给account_name用户发信息
14. wall 'msg_info' //给所有用户发信息
15. mail

chapter 15

chapter 16
1. at //需启动atd服务，如没启动，/etc/init.d/atd restart 来启动
   at [-mldv] time_to_run //-m(mail)完成at后邮件通知使用者 -l(list)列出所有at排程 -d(delete)取消/删除一个at工作 -v(view???)以时间格式列出at排程中任务列表
   
   at .... time_to_run
   >to do ...
   >to do ... <----ctrl + d 结束输入
2. atq //查询列出所有待运行工作，该命令等价于 at -l
3. atrm [job_number] //移除带运行的工作码为 job_number 的工作，该命令等价于 at -d job_number 
4. batch time_to_run //在cpu空闲时运行at，将at改为batch，其他与at一样
5. crontab [-u username] [-ler] //循环执行工作排程，-l(list) -e(edit) -r(remove all !!!)
	通过 crontab -e 进入编辑页面，每一行代表一个job，修改/新增后wq保存退出，与操作vi/vim一样，每行的内容为
	minutes(0-59) hour(0-23) day(1-31) month(1-12) week(0-7，周几的意思，0和7都是周日) to_do
	//可设置的除数字外，还有 *(任何时刻都可以) ,(分割时间段，如3,6代表3和6，不是3到6) -(代表范围，如3-6代表3,4,5,6) /n(每隔n个间隔，一般与*搭配使用，如*/5，代表每5单位执行一次)
	//week和day，month不能同时并存
6. anacron //处理非24小时运行的linux系统，crontab用于24小时运行的linux系统
   anacron [-sfn] [job] //-s(start 开始job) -f(force 强制运行job，不管是否到job需要运行时间) -n(now 立刻开始未完成的job)
   anacron -u job //-u(update) 仅更新记录文件时间戳，不进行job
   
chapter 17
1. command & //将command放在背景中运行
2. ctrl + z //将目前的job暂停，放到背景中
3. jobs [-lrs] //查看背景中job状态，-l(list)列出job信息，包括pid -r(run)仅列出运行中jobs -s(stop)仅列出停止的jobs
4. fg [%]job_number //将job_number的工作拿到前景来执行，'%'可有可无
5. bg %job_numner //将背景中暂停的job_number的工作在背景下运行
6. kill -l //-l(list) 列出kill所能使用的信号signal
   kill -signal %job_number/pid //signal为 kill -l 中的可用的数(常用的有1(reload)，2(ctrl + c)，9(强制删除)，15(正常删除，默认参数可不填，相当于 kill %job_number))，17(暂停状态，ctrl + z) job_number 需要kill掉的job
   //pid 与 %job_number 不同，%job_number用在工作控制中(job control)，通过jobs命令来获取，pid通过下面的ps命令来获取
7. nohup command [&] //将command在终端机中运行 & 放在背景中运行，不加为前景中运行，可以在注销及脱机下继续运行command
8. ps -l //查看自己bash程序，出来结果中S列代表程序状态：R(running) S(sleep) D(睡眠状态) T(stop/terminate) Z(zoombie 僵尸状态，程序中止但无法移至内存外)
   ps aux //查阅所有系统运行程序，结果中STAT列内容与上面S列一样
9. top [-p pid] //持续侦测程序运行状态，[-p pid]为针对某一个程序pid的运行状态
   //top运行过程中可使用按键命令：P(按cpu使用排序) M(按内存使用拍鞋) N(按pid排序) T(按程序使用cpu累积排序) q(退出top)
10. pstree -A [-p] //查找程序之间相关性(如杀不掉子程序，通过本命令来找到父程序，来杀掉) -p参数列出程序pid
11. killall [-iIe] -signal [command_name] //删除服务 -i(interactive 交互式询问用户是否要删除) -I(ignore case 忽略大小写) -e(exact 表示后面的command_name必须一致???)
12. nice //调整程序执行优先级
13. renice //调整已运行程序执行优先级
14. free [-bkmg] [-t] //显示内容使用情况 -b(byte) -k(KB) -m(MB) -g(GB) 设置显示数目的单位 -t 显示物理内存和swap总量
15. uname [-asrmpi] //显示系统与核心相关信息 -a(all)
16. uptime //系统启动时间及工作负载
17. netstat [-atunlp] //网络监控 -a(all) -t(tcp) -u(udp) -n(???) -l(listen) -p(pid)
18. dmesg
19. vmstat

chapter 18
1. service [service name] (start|stop|restart|...) // 启动/停止/重启 service name
   /etc/init.d/[service name] (start|stop|restart|...) //效果与上面一样
2. chkconfig --list [service name] //列出服务 service name 的状态信息，如没写服务名，列出所有服务
   chkconfig [service name] [on|off] //设置服务 service name 开机启动或者关闭
   chkconfig [--add|--del] [service name] //添加或者删除一个服务让chkconfig来管理，服务名称必须在 /etc/init.d/ 内!!!!

chapter 19

chapter 20

chapter 21

chapter 22
1. gcc [-Wall] [-c] *.c //生成 *.o 文件，-c参数为生成与 *.c同名的 *.o文件， -Wall参数为产生更详细的编译信息
   gcc -o * *.o //由 *.o 生成可执行文件 * ，如 gcc -o hello hello.o
   gcc *.c -lname -L/lib_path //编译加入额外函式链接库， -l为加入链接库，name则是libname.so函数库，其汇总ilb和扩展名(.a/.so)不需要写
2. makefile 规则
	已hello.c为例
(1) vim makefile
	hello(目标名称): hello.c(源码)
	<按tab键>gcc -o hello(要建立的执行文件名，如果与目标名称相同，可以改用$@，代表当前的目标名称) hello.o
	clean(目标名称): 
	按tab键>rm -f hello hello.o
	
	make clean hello //先执行rm -f hello hello.o，再执行gcc -o hello hello.o
	make clean //执行rm -f hello hello.o
	make hello //执行gcc -o hello hello.o
(2) 以shell中变量的方式
	vim makefile
	OBJS = hello.o
	hello: ${OBJS}
	<按tab键>gcc -o hello ${OBJS}
	clean: 
	按tab键>rm -f hello ${OBJS}
	
	运行方式与上面一样

chapter 23
1. 升级指令
   red hat/fedora yum
   debian/ubuntu apt
2. RPM: redhat package manager
3. *.rpm //RPM，编译过的包装完成的rpm档案
   *.src.rpm //SRPM，未编译的源码信息档案
4. rpm -ivh package_name //i:install v:view查看更细致的安装信息画面 h:显示安装进度
   rpm -Uvh/-Fvh package_name //-Uvh为package_name如果系统里没安装，则安装，安装了则更新，-Fvh为package_name如果系统里没安装，则不安装，安装了则更新
5. rpm -q software_name //q:query 查询软件是否安装在本机上
6. yum [option] search software_name //以software_name为关键字查找网络上软件
   yum [option] install/update/remove software_name //安装、更新及卸载软件
   上面两个option主要有 -y 和 --installroot=/install_path，-y参数相当于在安装或者更新或者删除过程中自动提供yes相应，因而可以放在crontab中运行，后面一个参数为安装到具体的路径

chapter 24

chapter 25

chapter 26

