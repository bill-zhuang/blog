vbird linux book

chapter 5
1. ctrl + c 终止当前进程
   ctrl + d 键盘输入结束
2. man command
/string 向下搜索
?string 向上搜索
n/N 继续下一个搜索/反向继续搜索(针对/string ?string)
q 离开man page
3. sync 数据同步写入硬盘
   reboot 重启
   shutdown -h now 即刻关机
   halt
   poweroff
4. 在终端机里面登入后，可以看到提示字符 $ 或者 #，# 代表以 root 的身份登入系统，而 $ 则代表一般身份使用者。

chapter 6
1. ll 命令下显示的说明(见ll.png)
第一个字符代表档案属性：目录/档案/链接文件... d:目录(directory) -:档案(regular file) l:链接文件(link file) b:区块设备档(block)(硬盘、软盘等) 
	c: 字符设备文件(character)(键盘、鼠标等)//后面两个一般出现在/dev目录下 s:资料接口文件(sockets) p:数据传输文件(pipe)
然后三个为一组，档案拥有者/所属群组/其它权限 rwx: read/write/execute, 无权限，已'-'出现
然后 .
然后是数字 i-node
然后是 档案拥有者名称
然后是 所属群组
然后是 档案大小(bytes)
然后是 档案创建/修改日期
然后是 档案名称
2. chgrp //change group
chgrp [-R] group_name filename/dirname //-R用于目录下所有文件都递归改变所属群组
3. chown //change owner
chown [-R] owner_name filename/dirname //-R用于目录下所有文件都递归改变所属拥有者
chown [-R] owner_name:group_name filename/dirname //改变档案或者目录所需拥有者及所属群组
上述两个命令用于复制档案后给别人(cp命令会同时复制档案的拥有者及所属群组，所以需要修改)
4. chmod        r:4 w:2 x:1
chmod [-R] xyz filename/dirname //-R用于目录下所有文件都递归改变所属权限 xyz代表数字，如755(rwxr-xr-x)
或者
chmod [-R] a=rwx, o=rwx, g=rx, o=r filename/dirname //a:all, o:owner, g:group, o:others, 除=外，还可以使用+-来增减权限， g+w
5. rwx 对档案/目录的区别
对档案：
r:可读
w:可写(修改、新增) <----不能删除!!!! 针对档案的内容而言
x:可被执行
对目录：
r:可读目录下有何文件(可使用ls)
w:修改、新建、删除、移动、重命名目录/档案  <----无论目录下档案的权限是什么，都可以修改，相当于目录的权限覆盖了目录下档案的权限(如果目录权限比目录下档案权限大的话???)
x:能否进入目录(可使用cd)
6. FHS
/bin /boot /dev /etc /home /lib /media /mnt /opt /root /sbin /srv /tmp /usr(unix sorftware resource) /var

chapter 7
1. shell script中路径最好用绝对路径
2. ./../-/~/~account --->当前目录/当前目录的上一目录(父目录)/回到上一个工作目录/目前帐号的home目录/account帐号的home目录
3. cd(change directory)
4. pwd(print working directory) 当前所在目录
pwd -P //真实路径，非链接路径
5. mkdir [-p] dir_name //-p:迭代建立目录
mkdir [-m xyz] dir_name //-m:预设目录的权限 xyz:目录权限
6. rmdir [-p] dir_name //删除空目录!!!  -p:迭代删除空目录(rmdir -p test/test/test....) //如需删除含有内容的目录，用rm -rf dir_name 命令
7. echo $PATH //':'为路径分隔符
修改PATH变量， PATH="$PATH":dir_name
8. ls -d(仅显示目录)
9. cp [-iar] src dest 
//-i用于提示是否覆盖相同文件，-a==-pdr -p用于复制文件的时候把源文件的权限也同样复制过去(备份) -r递归复制目录
10. rm [-rfi] file_name/dir_name
//-i用于提示是否删除文件，-f用于强制删除文件 -r递归删除目录
11. mv [-fiu] src dest
//-i用于提示是否覆盖同名文件， -f用于强制移动覆盖文件，如果文件存在的话，-u用于dest文件存在，且src比较新的时候，才更新
ps：mv也可用于重命名文件 或者用rename old new old_filename //rename a.txt b.txt a.txt 把a.txt重命名为b.txt，有点蛋疼
12. 获取路径的文件名及目录名
文件名：basename route_name
目录名：dirname route_name
13. 查阅档案内容
cat //concatenate
	cat -n filename //-n打印出行号，空白行的行号也打印
tac
	tac filename //与cat相反，从最后一行开始打印
nl
	nl filename //打印档案内容，无参数下与 cat -n 相同
more
	more filename //一页一页翻动，搜索字符等与其它差不多 /...
less
	less filename //一页一页翻动，但是可以往上翻，more不行
head
	head [-n number] filename //显示档案前几行内容，-n 数字为只显示设定的行数，如果数字为负数，那么显示的行数为总行数减去设定的数字
tail
	tail [-n number] filename //与head相反，只显示最后几行内容，-n 数字为显示设定的行数
	tail [-f] filename //一直监听文件内容及显示，适用于档案内容会不断写入，用于实时显示， ctrl+c中止输出内容
od
	od [-t a/c] binaryname //显示二进制文件内容
touch
	touch filename //用于建立一个空档案或者修改档案的修改时间[-acdmt]参数

umask //档案预设权限 uamsk//最右边三位或者 umask -S
	//建立档案是默认权限666(没有执行权限)，目录为777，
	//然后减去umask的值就得到建立的档案/目录的默认权限，对档案为644(rw-r--r--)，对目录是755(rwxr-xr-x)
	//ps：上面的减去umask的值，不是真的减去，如666-003 结果是是664 (rw-rw-rw-) - (-------wx) = (rw-rw-r--) !!!!! 
			实际上是先将umask的值取反NOT，然后与预设的档案/目录值相与AND
	//如果要修改umask预设减去的权限，umask xxx来设置需要的值，如 umask 002，就设置umask为002
chattr //设置文件档案隐藏属性
lsattr //显示文件档案隐藏属性

SUID SGID SBIT //U:user G:group B:bit

file filename //查看档案的数据类型
14. 搜索档案
which [-a] command_name //查找命令名所在位置(只在PATH中找)，-a参数用于列数所有在PATH目录中找到的指令
whereis [-bmsu] command_name/filename/dirname
	//-b 只查找binary格式档案，-m 只查找说明文件manual路径下档案，-s 值查找source来源档案，-u 查找不在左边三个项目中的档案
locate [-ir] keyword //-i 忽略大小写 -r 接正则表达式查找
	//locate 和 whereis 都是通过查找/var/lib/mlocate 中的数据库来查找，数据一天更新一次，如果要立即更新，使用updatedb命令
find //直接查找硬盘中内容
	find [PATH] [option] [option]
	option: 1.-atime/ctime/mtime n/+n/-n | -newer filepath
			2.-uid(指user id) n | -gid(指group id) n | -user name | -group name | -nouser | -nogroup
			3.-name filename | -size [+-]SIZE(+-:大于或小于SIZE c:byte k:1024bytes, 如-size +50k) | 
				-type TYPE(f/b/c/d/l/s, 参见ls档案类型，除常规档案由-变为f，其它没变) |
				-pern [-]mode(如没带-，查找权限等于mode的档案，带-是查找包含mode属性的档案)
			4. -exec command {} \; (额外的可选动作，查找到内容后执行command命令，其中{}为将find找到的内容放在{}中，\;代表执行命令到这里结束)
			5. -a(and同时满足-a两边的条件，-size +50k -a -size -60k，大小在50-60k之间) -o(or满足-o两边的条件之一， -size +50k -o -size 0，大小为大于50k或者0) !(!后面的条件不能满足 -size +50k ! -user root，大小大于50k且不能是root用户)

chapter 8
1. df [-h] //整体磁盘使用量，-h参数为已GB/MB/KB等方式列出
2. du [-smk] path //列出path路径下磁盘使用量，-s为列出总量(不列出各个目录的容量)，-m为以mb的形式列出，-k为以kb的形式列出，默认不加参数以kb输出
3. ln //软链接、硬链接
	hard link //两个链接的文件名必须相同??? 不能跨文件系统链接，不能链接目录
	symbolic link//快捷方式链接
	ln [-s] src dest //-s参书代表是否为软链接(加了-s参数，不加为硬链接)
4. fdisk //磁盘分区
5. mkfs //磁盘格式化 make file system
5. fsck/badblocks //磁盘检验
6. mount & unmount //挂载及卸载

chapter 9
1. 档案扩展名 *.Z(compress压缩) *.gz(gzip压缩) *.bz2(bzip2压缩) *.tar(tar打包，没压缩) *.tar.gz(tar打包，gzip压缩) *.tar.bz2(tar打包，bzip2压缩)
2. compress
3. gzip [-cdtv#] filename // -c参数将压缩的数据显示处理(感觉用处不大，用来重命名输出文件 gzip -c filename > *.gz) -d参数为解压*.gz文件(或者gunzip *.gz) -v参数查看压缩比信息 -t查看压缩文件是否一致，有无错误 -#(1-9) 压缩等级
   zcat *.gz //查看*.gz档案内容
4. bzip2 [-cdkzv#] filename // 参数与gzip相同， -k为保留原文件(gzip中压缩后会删除原文件)，-z为压缩参数 (bunzip2 *.bz2)
   bzcat *.bz2 //查看*.bz2档案内容
5. tar
   tar [-j/z] [cv] [-f *.tar.bz2/gz] filename(要打包压缩的档案名) //打包及压缩
   tar [-j/z] [tv] [-f *.tar.bz2/gz] //查看档案
   tar [-j/z] [xv] [-f *.tar.bz2/gz] [-C 要解压到所在目录路径] //解压缩
   //-j：通过bzip2压缩/解压 -z：通过gzip压缩或者解压
   //-c：打包档案(不是压缩，j/z才是!!!) -t：查看档案 -x：解打包及解压档案， 三个不能同时出现在一行命令中
   //-v(view)：压缩/解压过程中，将处理的文件名显示出来
   //-f filename 要处理/生成的压缩包名称
   //-p：保留备份数据原有的权限与属性 -P：保留绝对路径(待压缩的文件路径必须是绝对路径，相对的路径不行)
   //--exclude=FILE：压缩过程中，不将FILE打包
   //-C：用于将压缩文件解压到指定目录 tar -zxvf *.tar.gz -C specific_route
   //解压部分档案到指定目录 tar -zxvg *.tar.gz -C specific_route specific_filename(通过 tar -ztvf *.tar.gz 查看需要解压的档案名) ，注意-C specific_route必须放在 specific_filename前面
6. 输入命令太长，输入\后按Enter继续输入
7. dump //备份
8. restore //还原备份的dump文件，与上面的dump相反

chapter 10
1. 一般模式    编辑模式：i、I、o、O、a、A、r、R     命令模式：:/?
2. wq：保存退出  wq!：强制保存退出
3. 按键
一般模式：h(<-) j(down) k(up) l(->) ctrl+f==page down ctrl+b==page up
		  0/home键：移动到所在行开头 $/end：移动到所在行最后
		  G：移动到档案最后一行 nG：移动到第n行 gg：移动到开头第一行，相当于1G nEnter：目前所在行下移动n行
		  /word：向下搜寻word ?word：向上搜寻word n：继续向下搜寻 N：继续向上搜寻
		  :n1,n2s/word1/word2/g 在第n1到第n2行之间寻找word1，然后替换为word2
		  :1,$s/word1/word2/g 在第1到最后一行之间寻找word1，然后替换为word2
		  :1,$s/word1/word2/gc 在第1行到最后一行之间寻找word1，然后替换为word2，且替换前给出是否要替换确认信息
		  x：删除当前光标所在字符 X：删除当前光标所在字符的前一个字符 nx：连续删除当前光标开始n字符
		  dd：删除光标所在行 ndd：删除光标所在行下n行(包含光标所在行) d1G dG
		  yy：复制光标所在行 nyy：复制光标所在行下n行 y1G yG
		  p：粘贴内容到所在光标行下一行 P：粘贴内容到所在光标行上一行
		  u：复原上一动作(相当于ctrl+z) ctrl+r：重做上一动作
		  .：重复前一动作
编辑模式：i：所在光标处插入 I：所在光标行第一个非空字符处插入
		  a：所在光标下一个字符插入 A：所在光标行最后一个字符出插入
		  o：所在光标下一行插入新的一行 O：所在光标上一行插入新的一行
		  r R
		  Esc：回到一般模式
指令模式：:w 保存 :w 强制保存(不一定能保存成功，看权限)
		  :q 离开 :q!强制离开，不保存修改
		  :wq 保存后离开
		  :w filename 另存为filename
		  :n1,n2 w filename 将第n1到n2行内容保存到filename
		  :! command 离开vim到命令行模式下执行command命令 如 :! ls
		  :set nu 显示行号 :set nonu 取消行号
4. 选择区块
	ctrl+v 进入区块选择模式，然后hjkl或者上下左右键移动来选择需要的区块，然后y复制，然后回到一般模式后p粘贴复制的内容
5. :sp [filename] //在一个vim中打开多个档案窗口
6. dos2unix [-kn] file [newfile]
   unix2dos [-kn] file [newfile] //dos及unix下文档字符互换，如换行符等
7. iconv //编码格式转换
   iconv --list //列出所有编码格式
   iconv -f src_encoding -t dest_encoding filename [-o new_filename] //-f(from) -t(to)将filename档案由src_encoding转换到dest_encoding，[另存为new_filename档案]

chapter 11
1. alias //别名设定， alias new_name='command [parameter]'，如 alias ll='ls -al'
2. type [-tpa] command //判断command是外部指令还是bash内建指令
3. echo $variable_name/`command` //输出变量variable_name内容或者输出执行command命令后的结果(先执行command，再输出结果)
   variable_name=value //给变量variable_name赋值value，=两边不能有空格，如果value包含空格的话，需要用"'"或者'"'包含起来，'"'中$变量保留原有含义，与php一样
                       //'\'用来转义特殊符号，为变量增加内容，用"$variable_name"或者${variable_name}增加内容，如PATH="$PATH":/home/bin(这里的':'是PATH的一部分，即将':/home/bin'加到PATH变量中，且等号左边没有$符号!!!)
   export variable_name //使variable_name变量可以在别的程序中使用(使它成为环境变量)
   unset variable_name //取消变量
4. env //查看环境变量
5. set //查看所有变量(环境变量和自定义变量)
6. export variable_name //使variable_name 由自定义变量变为环境变量(类似全局，不同bash都可以访问)
   declare variable_name //使variable_name 由环境变量变为自定义变量
7. locale //语系

8. read [-pt] variable_name //-p用于给出提示说明信息 -t用于等待的时间，单位是秒，超过等待时间，会关闭输入
       read -p 'input your name: ' -t 10 name
9. declare [-aixr] variable_name //无参数，默认为字符类型，-a声明为数组类型 -i声明为整型int -x声明为环境变量(相当于export) -r声明为只读类型readonly，不能更改及unset
   //在读数组元素的时候，为echo ${array_name[1]} !!!
10. ulimit //设定系统资源使用限制
11. clear //清楚屏幕
12. alias [new_command='command -xx'] //如果没有参数，则是显示目前所拥有的别名命令，否则为设置命令别名
    unalias command_name //取消命令别名
13. history [n/-c] //n为列出最近n条命令记录，-c为将shell中所有history内容消除
    history [-raw] histfiles //-a将新增的history命令新增到histfiles中，如没有，预设写入~/.bash_history
                             //-r将histfiles中的内容读到目前所在shell的history记忆中
							 //-w将目前history记忆内容写到histfiles中(立即更新的，一般情况下是注销后才将命令写到文件中)
	!number //执行history命令历史记录中第number条命令
	!command //执行history命令历史记录中以command开头的最近的一条命令
	!! //执行上一条命令
14. /etc/issue //开机画面显示的内容所在位置
    //issue中代码代表含义 \d本地日期 \l所在第几个终端接口位置 \m硬件登记 \n主机网络名 \o domain name \r操作系统版本 \t本地时间 \s操作系统名 \v操作系统版本
	/etc/issue.net //用于远程登录用，显示信息
	/etc/motd //用于显示信息(所有登录用户都要的，包括维护之类的)