JavaScript: The Definitive Guide

chapter 3
1. 内部类：Array, Function, Date, RegExp, Error
2. 换行：'new \n line' 或者 "new \n line"
3. var a = [];
   var b = a; <-----a,b 指向同一个数组
4. Number 类 toString() 方法接收转换基数的可选参数，如 2.toString(2) ---> 得到二进制 10
5. parseInt, parseFloat   
   parseInt('3  xx')  ---> 3 
   parseInt('xx  3')  ---> NaN
6. 变量在声明它们的函数体及这个函数体嵌套的任意函数体内都有定义，即将函数内所有的变量声明提前到函数顶部(但不涉及赋值!!!)
function test()
{
    for(var i = 0; i < 10; i++) {
        ;
    }
    console.log(i);    -------> 输出10
}

var i = 1;
function test()
{
    console.log(i);  -----> undefined //声明了i局部变量，覆盖了全局变量，但是没赋值，赋值要到下一条语句!!!
    var i = 2;
    console.log(i);  -----> 2
}
上面的相当于
var i = 1;
function test()
{
	var i;
    console.log(i);
    i = 2;
    console.log(i);
}
7. 
var i =1;
j = 2;

delete i; ---> true; //书上说是false???
delete j; ---> true;

chapter 4
1. 对象声明
var obj = {x:1};
对于对象的 key (上面的x)，如果为js保留字，需加引号，
ps：如果key为数字，非科学计数法的，key可以不加引号，只能通过'[]'访问
    如果为科学计数法，key带引号和不带有区别，只能能通过'[]'访问
	var obj = {12e34: 1};
	console.log(obj[12e34]);      -----> 1
	console.log(obj['12e34']);    -----> undefined
	console.log(obj['1.2e+35']);  -----> 1

	var obj = {'12e34': 1};
	console.log(obj[12e34]);      -----> undefined
	console.log(obj['12e34']);    -----> 1
	console.log(obj['1.2e+35']);  -----> undefined
参考url：http://stackoverflow.com/questions/4348478/what-is-the-difference-between-object-keys-with-quotes-and-without-quotes
部分测试结果与参考url不符
按参考url说的，key如果为数字常量及有效的标识符，key两边的引号可以忽略
访问key对应的value，'[]'适用所有情况，'.'只适用于key是有效标识符的
2. in 操作符 //判断是否有对应的key存在(是key，不是value!!!)
3. typeof 返回式是个字符串(string)

chapter 5
1. for/in
for(var key in object) {
	//object[key]...
}
2. break [label_name] //break 可带标签名，用于跳出多层的循环
3. continue [label_name] //continue 可带标签名，用于跳出多层的循环
4. try/catch/finally
5. with 语句

chapter 6
1. 检测属性存在与否 in/hasOwnProperty()
2. json //javascript object notation
	JSON.stringify(obj)   ---->序列化对象(json_encode)
	JSON.parse(parse_obj) ---->反序列化(json_decode)

chapter 7
1. 初始化 var arr = []; / var arr = new Array(); / var arr = new Array(length); / var arr = new Array(1, 2, ..'a'...);
2. Array 方法
join() //默认是','，如用在httpBuildQuery中，.....join('&')  <------> split
reverse()
sort()
concat()
slice() //如用在按长度切割数组，array_chunk, push(...slice(start_index, length))
splice()
push()/pop()
shift()/unshift()
toString()/toLocalString()
在EMCAScript 5中函数
forEach() map() filter() every()/some() reduce()/reductRight() indexOf()/lastIndexOf()

chapter 8
1. 没形参的构造函数可以省略括号
2. 带默认参数形参函数，可见javascript.txt中，本文中也给了差不多的例子
function withDefaultParameter(a, /* optional */ b)
{
	if(typeof b === 'undefined') {
		b = default_value;
	}
	
	//or
	
	b = b || 'default_value';
	
	....
}
3. 不确定参数个数
function getMoreParameter(/*...*/)
{
	for(var i = 0; len = arguments.length; i < len; i++) {
		arguments[i];
	}
	arguments[0]...[n] if exist
}
ps: argument是js中内部定义的(可以这样理解??)
4. 传递参数有多个的话，建议通过对象的方式传递(key => value...，不需记参数顺序)
5. var func = (function () {...});   --->function 外面的圆括号是必须的!!!!
6. 闭包 //可以捕捉到局部变量及参数，保存下来
参考url：https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures
..... = function(...) {
	....
};
与
.... = funcClosure(....);
区别：
前者会获取当前所在函数的环境，如果放在for循环里面的话，所有的闭包都共享同一个环境，
后者闭包的环境为funcClosure，所以如果放在for循环里面的话，每个都是一个独立的环境(这样理解是否可以?????)

chapter 9

chapter 10
'...'.search(regex)  ---->非全局搜索，即时加了g修饰符
'...'.replace(regex, '...')
'...'.match(regex)  ----->返回数组，如果不带全局g修饰符，不会进行全局搜索，只检索第一个匹配(如果都没有匹配的话，相当于全局检索了)
'...'.split(regex/string) ---->可以接受regex表达式或者字符串
RegExp('/.../', [optional(修饰符：i、m、g)])


chapter 11
1. let 声明变量(如放在循环里，则在作用域外访问是 undefined)
2. var [x, y, z] = [1, 2, 3] //var x = 1, y = 2, z = 3;
3. for each //遍历对象属性的值，与for in不同(遍历对象的属性)
var arr = {one : 1, two : 2};
for each(var val in arr) {
    console.log(val);
}

chapter 12

chapter 13
1. element(通过document.getElementById...) 对象都有 style 和 className 属性
2. unobtrusive JavaScript: 一种将javascript从HTML中抽离的概念，避免在HTML标签中夹杂一堆onchange, onclick等属性去挂载Javascript事件
   让HTML与Javascript分离，依MVC的原则将功能权责区分清楚，使HTML也变得结构化容易阅读
实际上使用html事件处理程序的属性是不好的习惯，他们更喜欢保持内容的行为的分离。
3.
<script type="text/javascript" language="javascript">  <-----type默认为text/javascript, language属性已经废弃
....
</script>
所以上面可以简写为
<script>
....
</script>
4. javascript: URL
5. 脚本通常会按它们在文档的出现顺序执行//一般放在最后，加快文档加载速度
5. 注册事件处理程序最简单的方法是把Javascript函数赋值给目标对象的属性，如：
   document.getElementById("....").onclick = function() {....};
或
   function handleEvent() {...}
   document.getElementById("....").onclick = handleEvent;  <----函数名后不要加括号!!!
ps: 此时需将script内容放在文档最后，在html元素加载后在加载script内容!!!，不然提示元素为null
6. 全局函数
setInterval(function, m_second);
setTimeout(function, m_second);
7. xss/css cross site scripting
8. location.search.substring([1, 2.... optional]) //获取url中?开始到结束的所有字符

chapter 14
1. setTimeout 返回值可以传给 clearTimeout函数，用于取消函数执行
   setInterval 返回值可以传给 clearInterval函数，用于取消函数执行
2. window.location 对象
   (所拥有属性：href/protocol/host/hostname/port/pathname/search)
   (所拥有的方法：assign()/repalce()/reload())
3. window.history 对象
history.back() //后退按钮
history.forward() //前进按钮
history.go(number) //number可为正或者负数，如2代表按前进按钮两次，-2代表按后退按钮两次
3. window.navigator 
   (所拥有的属性：appName/appVersion/userAgent/platform/onLine/geolocation)
   (所拥有的方法：javaEnabled()/cookieEnable())
通过浏览器获取经纬度
function getCoordinateByBrowser()
{
	if(navigator.geolocation) {
		navigator.geolocation.getCurrentPosition(function(position) {
			console.log(position.coords.latitude);
			console.log(position.coords.longitude);
		});
	}
}
ps: 上面方法是异步的，不会马上返回结果
4. window.screen 对象
   (所拥有的属性：width/height/availWidth/availHeight/colorDepth)
5. 对话框： alert/confirm/prompt
6. window.onerror = function(error, url, line) {
		...
   }
7. window.open(url, window_name, properties[width/height/status/resizable...])
8. window.close()

chapter 15
1. IE中，getElementsByName 也返回id属性匹配指定值的元素，应小心谨慎
2. element对象方法 getAttribute()/setAttribute()/removeAttribute()/hasAttribute()
3. 
var s = document.createElement('script')
s.src = url;
....appendChild(s);
....insertBefore(.....);
....removeChild(s);
....replaceChild(.....);
4. var $ = function(id) {
	return document.getElementById(id);
}

$(element_id)....;
5. form 属性：action/encoding/method/target 方法：submit()/reset() 事件：onsubmit()[返回false中止提交表单]/onreset()
6. document.cookie //读取http cookie

chapter 16
1. 
<style>
css here...
</style>
或者
<head>
<link rel="stylesheet" href=".....css" type="text/css">
</head>

chapter 17

chapter 18
1.
var request = new XMLHttpRequest();
request.open('get/post', url, false[false代表同步，true代表异步(默认值)]);
request.setRequestHeader('....');
request.onreadystatechange = function() {
	if(request.readyState == 4) {
		if(request.status == 200) {
			result = request.responseText;
			...
		} else {
			
		}
	}
}
request.send(null);  <-----如果为post的话，那么方法里面的参数一般不为null(有要发送的数据)，get要发送的数据一般放在url中了